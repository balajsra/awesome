#+TITLE: Personal Awesome WM Configuration
#+AUTHOR: Sravan Balaji
#+AUTO_TANGLE: t
#+STARTUP: showeverything

* Table of Contents :TOC_3:noexport:
- [[#welcome][Welcome]]
- [[#libraries][Libraries]]
- [[#error-handling][Error Handling]]
- [[#variable-definitions][Variable Definitions]]
  - [[#file-paths][File Paths]]
  - [[#themes][Themes]]
  - [[#commands][Commands]]
  - [[#modkey][Modkey]]
  - [[#layouts][Layouts]]
  - [[#tags][Tags]]
- [[#notifications][Notifications]]
- [[#status-bar][Status Bar]]
  - [[#launcher-and-main-menu][Launcher and Main Menu]]
  - [[#keyboard-map-indicator-and-switcher][Keyboard Map Indicator and Switcher]]
  - [[#clock][Clock]]
  - [[#tag-list][Tag List]]
  - [[#task-list][Task List]]
  - [[#setup-status-bar-per-screen][Setup Status Bar per Screen]]
- [[#bindings][Bindings]]
  - [[#mouse][Mouse]]
    - [[#global][Global]]
    - [[#client][Client]]
  - [[#keyboard][Keyboard]]
    - [[#global-1][Global]]
    - [[#client-1][Client]]
    - [[#numbers-to-tags][Numbers to Tags]]
    - [[#set-keys][Set Keys]]
- [[#rules][Rules]]
- [[#signals][Signals]]
  - [[#new-client-appears][New Client Appears]]
  - [[#titlebar][Titlebar]]
  - [[#focus][Focus]]
    - [[#focus-follows-mouse][Focus follows Mouse]]
    - [[#focus-border-color][Focus Border Color]]
- [[#theme][Theme]]
  - [[#libraries-1][Libraries]]
  - [[#inherit-default-theme][Inherit Default Theme]]
  - [[#variable-definitions-1][Variable Definitions]]
  - [[#windows][Windows]]
  - [[#notifications-1][Notifications]]
  - [[#tool-tip][Tool Tip]]
  - [[#tag-list-1][Tag List]]
  - [[#task-list-1][Task List]]
  - [[#title-bar][Title Bar]]
  - [[#mouse-finder][Mouse Finder]]
  - [[#menu][Menu]]
  - [[#icons][Icons]]
    - [[#layout][Layout]]
    - [[#title-bar-1][Title Bar]]
    - [[#applications][Applications]]
    - [[#awesome][Awesome]]
    - [[#tag-list-squares][Tag List Squares]]
  - [[#wallpaper][Wallpaper]]
    - [[#detect-light--dark-theme][Detect Light / Dark Theme]]
    - [[#generate-wallpaper][Generate Wallpaper]]
  - [[#return-theme][Return Theme]]

* Welcome

My personal configuration of Awesome WM, written as an [[https://orgmode.org][Org Mode]] document.

Run the block below with ~C-c C-c~ to tangle code blocks to config file.

#+BEGIN_SRC emacs-lisp :tangle no
(org-mode-restart)
(org-babel-tangle)
#+END_SRC

* Libraries

If LuaRocks is installed, make sure that packages installed through it are found (e.g. lgi). If LuaRocks is not installed, do nothing.

#+BEGIN_SRC lua :tangle rc.lua
pcall(require, "luarocks.loader")
#+END_SRC

Standard awesome library

#+BEGIN_SRC lua :tangle rc.lua
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
#+END_SRC

Remote execution (i.e., control awesome from outside awesome)

#+BEGIN_SRC lua :tangle rc.lua
require("awful.remote")
#+END_SRC

Widget and layout library

#+BEGIN_SRC lua :tangle rc.lua
local wibox = require("wibox")
#+END_SRC

Theme handling library

#+BEGIN_SRC lua :tangle rc.lua
local beautiful = require("beautiful")
#+END_SRC

Notification library

#+BEGIN_SRC lua :tangle rc.lua
local naughty = require("naughty")
#+END_SRC

Enable hotkeys help widget for VIM and other apps when client with a matching name is opened:

#+BEGIN_SRC lua :tangle rc.lua
local hotkeys_popup = require("awful.hotkeys_popup")
require("awful.hotkeys_popup.keys")
#+END_SRC

Automatically move and center mouse cursors to the focused window

#+BEGIN_SRC lua :tangle rc.lua
require("awesomewm-micky")
#+END_SRC

* Error Handling

Check if awesome encountered an error during startup and fell back to another config (This code will only ever execute for the fallback config)

#+BEGIN_SRC lua :tangle rc.lua
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end
#+END_SRC

Handle runtime errors after startup

#+BEGIN_SRC lua :tangle rc.lua
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
#+END_SRC

* Variable Definitions

** File Paths

#+BEGIN_SRC lua :tangle rc.lua
home_path           = "/home/sravan"
awesome_config_path = home_path .. "/.config/awesome"
awesome_config_file = awesome_config_path .. "/" .. "README.org"
awesome_theme_file  = awesome_config_path .. "/" .. "theme.lua"
#+END_SRC

** Themes

Themes define colours, icons, font and wallpapers.

#+BEGIN_SRC lua :tangle rc.lua
beautiful.init(awesome_theme_file)
#+END_SRC

** Commands

#+BEGIN_SRC lua :tangle rc.lua
terminal_cmd           = "kitty"
editor_cmd             = os.getenv("EDITOR") or "emacs"
rofi_cmd               = "rofi -show combi"
control_center_cmd     = "/home/sravan/.scripts/control-center.sh --rofi"
brightness_cmd         = "/home/sravan/.scripts/brightness.sh --rofi"
clipboard_cmd          = "rofi -show clipboard"
rbw_cmd                = "rofi-rbw"
volume_cmd             = "/home/sravan/.scripts/pactl.sh --rofi"
media_cmd              = "/home/sravan/.scripts/playerctl.sh --rofi"
notification_cmd       = "/home/sravan/.scripts/naughty.sh --rofi"
session_cmd            = "/home/sravan/.scripts/session.sh --rofi"
compositor_cmd         = "/home/sravan/.scripts/picom.sh --rofi"
lower_volume_cmd       = "/home/sravan/.scripts/pactl.sh --lower"
mute_volume_cmd        = "/home/sravan/.scripts/pactl.sh --mute"
raise_volume_cmd       = "/home/sravan/.scripts/pactl.sh --raise"
player_play_pause_cmd  = "/home/sravan/.scripts/playerctl.sh --play-pause"
player_next_cmd        = "/home/sravan/.scripts/playerctl.sh --next"
player_prev_cmd        = "/home/sravan/.scripts/playerctl.sh --prev"
flameshot_cmd          = "flameshot gui"
force_close_window_cmd = "xkill"
trackpad_toggle_cmd    = "/home/sravan/.scripts/trackpad.sh"
#+END_SRC

** Modkey

Default modkey.
Usually, Mod4 is the key with a logo between Control and Alt (Super key).
If you do not like this or do not have such a key, I suggest you to remap Mod4 to another key using xmodmap or other tools.
However, you can use another modifier like Mod1, but it may interact with others.

#+BEGIN_SRC lua :tangle rc.lua
modkey = "Mod4"
#+END_SRC

** Layouts

Table of layouts to cover with awful.layout.inc, order matters.

#+BEGIN_SRC lua :tangle rc.lua
awful.layout.layouts = {
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier,
    -- awful.layout.suit.corner.nw,
    -- awful.layout.suit.corner.ne,
    -- awful.layout.suit.corner.sw,
    -- awful.layout.suit.corner.se,
    awful.layout.suit.floating,
}
#+END_SRC

** Tags

#+BEGIN_SRC lua :tangle rc.lua
taglist = { " ₁", "龎 ₂", " ₃", " ₄", "爵 ₅", " ₆", " ₇", " ₈", " ₉" }
#+END_SRC

* Notifications

#+BEGIN_SRC lua :tangle rc.lua
naughty.config.defaults.timeout = 10 -- in seconds
naughty.config.defaults.position = "top_right"
#+END_SRC

* Status Bar

** Launcher and Main Menu

Create a launcher widget and a main menu

#+BEGIN_SRC lua :tangle rc.lua
myawesomemenu = {
   { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
   { "manual", terminal_cmd .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome_config_file },
   { "restart", awesome.restart },
   { "quit", function() awesome.quit() end },
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "open terminal", terminal_cmd }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })
#+END_SRC

** Keyboard Map Indicator and Switcher

Keyboard map indicator and switcher

#+BEGIN_SRC lua :tangle rc.lua
mykeyboardlayout = awful.widget.keyboardlayout()
#+END_SRC

** Clock

Create a textclock widget

See https://www.gammon.com.au/scripts/doc.php?lua=os.date for formatting options

#+BEGIN_SRC lua :tangle rc.lua
mytextclock = wibox.widget.textclock()
mytextclock.format = " %a %m/%d/%y  %I:%M %p"
mytextclock.refresh = 60 -- in seconds
#+END_SRC

** Tag List

Create a wibox for each screen and add it

#+BEGIN_SRC lua :tangle rc.lua
local taglist_buttons = gears.table.join(
                    awful.button({ }, 1, function(t) t:view_only() end),
                    awful.button({ modkey }, 1, function(t)
                                              if client.focus then
                                                  client.focus:move_to_tag(t)
                                              end
                                          end),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, function(t)
                                              if client.focus then
                                                  client.focus:toggle_tag(t)
                                              end
                                          end),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
                )
#+END_SRC

** Task List

#+BEGIN_SRC lua :tangle rc.lua
local tasklist_buttons = gears.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  c:emit_signal(
                                                      "request::activate",
                                                      "tasklist",
                                                      {raise = true}
                                                  )
                                              end
                                          end),
                     awful.button({ }, 3, function()
                                              awful.menu.client_list({ theme = { width = 250 } })
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                          end))
#+END_SRC

** Setup Status Bar per Screen

#+BEGIN_SRC lua :tangle rc.lua
awful.screen.connect_for_each_screen(function(s)
    -- Each screen has its own tag table.
    awful.tag(taglist, s, awful.layout.layouts[1])

    -- Create a promptbox for each screen
    s.mypromptbox = awful.widget.prompt()
    -- Create an imagebox widget which will contain an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    s.mylayoutbox = awful.widget.layoutbox(s)
    s.mylayoutbox:buttons(gears.table.join(
                           awful.button({ }, 1, function () awful.layout.inc( 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(-1) end),
                           awful.button({ }, 4, function () awful.layout.inc( 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(-1) end)))
    -- Create a taglist widget
    s.mytaglist = awful.widget.taglist {
        screen  = s,
        filter  = awful.widget.taglist.filter.all,
        buttons = taglist_buttons
    }

    -- Create a tasklist widget
    s.mytasklist = awful.widget.tasklist {
        screen  = s,
        filter  = awful.widget.tasklist.filter.currenttags,
        buttons = tasklist_buttons
    }

    -- Create the wibox
    s.mywibox = awful.wibar({ position = "top", screen = s })

    -- Add widgets to the wibox
    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
            mylauncher,
            s.mytaglist,
            s.mypromptbox,
        },
        s.mytasklist, -- Middle widget
        { -- Right widgets
            layout = wibox.layout.fixed.horizontal,
            -- mykeyboardlayout,
            wibox.widget.systray(),
            mytextclock,
            s.mylayoutbox,
        },
    }
end)
#+END_SRC

* Bindings

** Mouse

*** Global

#+BEGIN_SRC lua :tangle rc.lua
root.buttons(gears.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
#+END_SRC

*** Client

#+BEGIN_SRC lua :tangle rc.lua
clientbuttons = gears.table.join(
    awful.button({ }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
    end),
    awful.button({ modkey }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.move(c)
    end),
    awful.button({ modkey }, 3, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.resize(c)
    end)
)
#+END_SRC

** Keyboard

*** Global

#+BEGIN_SRC lua :tangle rc.lua
globalkeys = gears.table.join(
    awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
              {description="show help", group="awesome"}),
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
              {description = "view previous", group = "tag"}),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
              {description = "view next", group = "tag"}),
    awful.key({ modkey,           }, "Tab", awful.tag.history.restore,
              {description = "go back", group = "tag"}),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {description = "focus next by index", group = "client"}
    ),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {description = "focus previous by index", group = "client"}
    ),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
              {description = "show main menu", group = "awesome"}),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
              {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey,           }, ".", function () awful.screen.focus_relative( 1) end,
              {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey,           }, ",", function () awful.screen.focus_relative(-1) end,
              {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
              {description = "jump to urgent client", group = "client"}),
    awful.key({ modkey, "Control" }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "go back", group = "client"}),

    -- Standard program
    awful.key({ modkey, "Shift"   }, "Return", function () awful.spawn(terminal_cmd) end,
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey, "Shift", "Control" }, "q", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit,
              {description = "quit awesome", group = "awesome"}),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
              {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
              {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
              {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
              {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
              {description = "select previous", group = "layout"}),

    awful.key({ modkey, "Shift" }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                    c:emit_signal(
                        "request::activate", "key.unminimize", {raise = true}
                    )
                  end
              end,
              {description = "restore minimized", group = "client"}),

    -- Prompt
    awful.key({ modkey },            "r",     function () awful.screen.focused().mypromptbox:run() end,
              {description = "run prompt", group = "launcher"}),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run {
                    prompt       = "Run Lua code: ",
                    textbox      = awful.screen.focused().mypromptbox.widget,
                    exe_callback = awful.util.eval,
                    history_path = awful.util.get_cache_dir() .. "/history_eval"
                  }
              end,
              {description = "lua execute prompt", group = "awesome"}),

    -- Menubar
    awful.key({ modkey            }, "p",      function() awful.spawn(rofi_cmd) end,
              {description = "show rofi menu", group = "launcher"}),
    awful.key({ modkey, "Control" }, "p",      function() awful.spawn(control_center_cmd) end,
              {description = "show control center", group = "launcher"}),
    awful.key({ modkey, "Control" }, "c",      function() awful.spawn(clipboard_cmd) end,
              {description = "show clipboard history", group = "launcher"}),
    awful.key({ modkey, "Control" }, "d",      function() awful.spawn(brightness_cmd) end,
              {description = "show brightness controls", group = "launcher"}),
    awful.key({ modkey, "Control" }, "b",      function() awful.spawn(rbw_cmd) end,
              {description = "show bitwarden password vault", group = "launcher"}),
    awful.key({ modkey, "Control" }, "v",      function() awful.spawn(volume_cmd) end,
              {description = "show volume controls", group = "launcher"}),
    awful.key({ modkey, "Control" }, "m",      function() awful.spawn(media_cmd) end,
              {description = "show media controls", group = "launcher"}),
    awful.key({ modkey, "Control" }, "n",      function() awful.spawn(notification_cmd) end,
              {description = "show notification controls", group = "launcher"}),
    awful.key({ modkey, "Control" }, "q",      function() awful.spawn(session_cmd) end,
              {description = "show session controls", group = "launcher"}),
    awful.key({ modkey, "Control" }, "Escape", function() awful.spawn(compositor_cmd) end,
              {description = "show compositor controls", group = "launcher"}),

    -- Media Keys
    awful.key({ }, "XF86AudioLowerVolume", function() awful.spawn(lower_volume_cmd) end,
              {description = "Lower audio volume", group = "media"}),
    awful.key({ }, "XF86AudioMute",        function() awful.spawn(mute_volume_cmd) end,
              {description = "Mute audio", group = "media"}),
    awful.key({ }, "XF86AudioRaiseVolume", function() awful.spawn(raise_volume_cmd) end,
              {description = "Raise audio volume", group = "media"}),
    awful.key({ }, "XF86AudioPlay",        function() awful.spawn(player_play_pause_cmd) end,
              {description = "Play / Pause Media", group = "media"}),
    awful.key({ }, "XF86AudioNext",        function() awful.spawn(player_next_cmd) end,
              {description = "Next media track", group = "media"}),
    awful.key({ }, "XF86AudioPrev",        function() awful.spawn(player_prev_cmd) end,
              {description = "Previous media track", group = "media"}),

    -- Special Keys and Miscellaneous Shortcuts
    awful.key({ }, "XF86TouchpadToggle",   function() awful.spawn(trackpad_toggle_cmd) end,
              {description = "Enable / Disable Touchpad", group = "misc"}),
    awful.key({ }, "Print",                function() awful.spawn(flameshot_cmd) end,
              {description = "Take a screenshot", group = "misc"}),
    awful.key({ modkey, "Shift", "Control" }, "c", function () awful.spawn(force_close_window_cmd) end,
              {description = "force close window", group = "misc"})
)
#+END_SRC

*** Client

#+BEGIN_SRC lua :tangle rc.lua
clientkeys = gears.table.join(
    awful.key({ modkey, "Shift"   }, "f",
        function (c)
            c.fullscreen = not c.fullscreen
            c:raise()
        end,
        {description = "toggle fullscreen", group = "client"}),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end,
              {description = "close", group = "client"}),
    awful.key({ modkey,           }, "f",  awful.client.floating.toggle                     ,
              {description = "toggle floating", group = "client"}),
    awful.key({ modkey,           }, "Return", function (c) c:swap(awful.client.getmaster()) end,
              {description = "move to master", group = "client"}),
    awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
              {description = "move to screen", group = "client"}),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
              {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end ,
        {description = "minimize", group = "client"}),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized = not c.maximized
            c:raise()
        end ,
        {description = "(un)maximize", group = "client"}),
    awful.key({ modkey, "Control" }, "m",
        function (c)
            c.maximized_vertical = not c.maximized_vertical
            c:raise()
        end ,
        {description = "(un)maximize vertically", group = "client"}),
    awful.key({ modkey, "Shift"   }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c:raise()
        end ,
        {description = "(un)maximize horizontally", group = "client"})
)
#+END_SRC

*** Numbers to Tags

Bind all key numbers to tags.
Be careful: we use keycodes to make it work on any keyboard layout.
This should map on the top row of your keyboard, usually 1 to 9.

#+BEGIN_SRC lua :tangle rc.lua
for i = 1, 9 do
    globalkeys = gears.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = awful.screen.focused()
                      local tag = screen.tags[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end,
                  {description = "toggle tag #" .. i, group = "tag"}),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"}),
        -- Toggle tag on focused client.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:toggle_tag(tag)
                          end
                      end
                  end,
                  {description = "toggle focused client on tag #" .. i, group = "tag"})
    )
end
#+END_SRC

*** Set Keys

#+BEGIN_SRC lua :tangle rc.lua
root.keys(globalkeys)
#+END_SRC

* Rules

Rules to apply to new clients (through the "manage" signal).

#+BEGIN_SRC lua :tangle rc.lua
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },

    -- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
          "pinentry",
        },
        class = {
          "Arandr",
          "Blueman-manager",
          "Gpick",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
          "Wpa_gui",
          "veromix",
          "xtightvncviewer"},

        -- Note that the name property shown in xprop might be set slightly after creation of the client
        -- and the name shown there might not match defined rules here.
        name = {
          "Event Tester",  -- xev.
          "Picture in picture",
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "ConfigManager",  -- Thunderbird's about:config.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      }, properties = { floating = true }},

    -- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "normal", "dialog" }
      }, properties = { titlebars_enabled = false } -- Enable/Disable Titlebars here
    },

    -- Set Firefox to always map on the tag named "2" on screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { screen = 1, tag = "2" } },
}
#+END_SRC

* Signals

** New Client Appears

Signal function to execute when a new client appears.

#+BEGIN_SRC lua :tangle rc.lua
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup
      and not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)
#+END_SRC

** Titlebar

Add a titlebar if titlebars_enabled is set to true in the rules.

#+BEGIN_SRC lua :tangle rc.lua
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = gears.table.join(
        awful.button({ }, 1, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c) : setup {
        { -- Left
            awful.titlebar.widget.iconwidget(c),
            buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "center",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            awful.titlebar.widget.floatingbutton (c),
            awful.titlebar.widget.maximizedbutton(c),
            awful.titlebar.widget.stickybutton   (c),
            awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)
#+END_SRC

** Focus

*** Focus follows Mouse

Enable sloppy focus, so that focus follows mouse.

#+BEGIN_SRC lua :tangle rc.lua
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = false})
end)
#+END_SRC

*** Focus Border Color

#+BEGIN_SRC lua :tangle rc.lua
client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
#+END_SRC

* Theme

Based on Awesome theme which follows xrdb config by Yauhen Kirylau.

** Libraries

#+BEGIN_SRC lua :tangle theme.lua
local theme_assets = require("beautiful.theme_assets")
local xresources = require("beautiful.xresources")
local dpi = xresources.apply_dpi
local xrdb = xresources.get_current_theme()
local gfs = require("gears.filesystem")
local themes_path = gfs.get_themes_dir()
local shape = require("gears.shape")
local naughty = require("naughty")
#+END_SRC

** Inherit Default Theme

Load vector assets' generators for this theme

#+BEGIN_SRC lua :tangle theme.lua
local theme = dofile(themes_path.."default/theme.lua")
#+END_SRC

** Variable Definitions

#+BEGIN_SRC lua :tangle theme.lua
local font = "Ubuntu Nerd Font"
local font_size = dpi(11)
local gap_size = dpi(10)
local border_size = dpi(2)
local menu_height = dpi(20)
local menu_width = dpi(200)
local taglist_square_size = dpi(5)
local notification_border_color = xrdb.color2
local notification_shape = shape.rounded_rect
local notification_max_width = dpi(700)
local notification_max_height = dpi(125)
local notification_icon_size = dpi(125)
#+END_SRC

** Windows

#+BEGIN_SRC lua :tangle theme.lua
theme.font          = font .. " " .. tostring(font_size)

theme.bg_normal     = xrdb.background
theme.bg_focus      = xrdb.color12
theme.bg_urgent     = xrdb.color9
theme.bg_minimize   = xrdb.color8
theme.bg_systray    = theme.bg_normal

theme.fg_normal     = xrdb.foreground
theme.fg_focus      = theme.bg_normal
theme.fg_urgent     = theme.bg_normal
theme.fg_minimize   = theme.bg_normal

theme.useless_gap   = gap_size
theme.border_width  = border_size
theme.border_normal = xrdb.color0
theme.border_focus  = theme.bg_focus
theme.border_marked = xrdb.color10
theme.gap_single_client = true
#+END_SRC

** Notifications

#+BEGIN_SRC lua :tangle theme.lua
theme.notification_font = font
theme.notification_bg = xrdb.background
theme.notification_fg = xrdb.foreground
theme.notification_border_width = border_size
theme.notification_border_color = notification_border_color
theme.notification_shape = notification_shape
-- theme.notification_opacity
theme.notification_margin = gap_size
theme.notification_max_width = notification_max_width
theme.notification_max_height = notification_max_height
theme.notification_icon_size = notification_icon_size

naughty.config.padding = gap_size
naughty.config.spacing = gap_size

naughty.config.presets.critical.bg = xrdb.color1
naughty.config.presets.critical.fg = xrdb.foreground
#+END_SRC

** Tool Tip

Configuration options:

#+BEGIN_EXAMPLE
tooltip_[font|opacity|fg_color|bg_color|border_width|border_color]
#+END_EXAMPLE

#+BEGIN_SRC lua :tangle theme.lua
theme.tooltip_fg = theme.fg_normal
theme.tooltip_bg = theme.bg_normal
#+END_SRC

** Tag List

Configuration options:

#+BEGIN_EXAMPLE
taglist_[bg|fg]_[focus|urgent|occupied|empty|volatile]
#+END_EXAMPLE

** Task List

Configuration options:

#+BEGIN_EXAMPLE
tasklist_[bg|fg]_[focus|urgent]
#+END_EXAMPLE

** Title Bar

Configuration options:

#+BEGIN_EXAMPLE
titlebar_[bg|fg]_[normal|focus]
#+END_EXAMPLE

** Mouse Finder

Configuration options:

#+BEGIN_EXAMPLE
mouse_finder_[color|timeout|animate_timeout|radius|factor]
#+END_EXAMPLE

** Menu

Configuration options:

#+BEGIN_EXAMPLE
menu_[bg|fg]_[normal|focus]
menu_[border_color|border_width]
#+END_EXAMPLE

#+BEGIN_SRC lua :tangle theme.lua
theme.menu_submenu_icon = themes_path.."default/submenu.png"
theme.menu_height = menu_height
theme.menu_width  = menu_width
#+END_SRC

** Icons

*** Layout

Recolor Layout icons:

#+BEGIN_SRC lua :tangle theme.lua
theme = theme_assets.recolor_layout(theme, theme.fg_normal)
#+END_SRC

*** Title Bar

Recolor titlebar icons:

#+BEGIN_SRC lua :tangle theme.lua
local function darker(color_value, darker_n)
    local result = "#"
    for s in color_value:gmatch("[a-fA-F0-9][a-fA-F0-9]") do
        local bg_numeric_value = tonumber("0x"..s) - darker_n
        if bg_numeric_value < 0 then bg_numeric_value = 0 end
        if bg_numeric_value > 255 then bg_numeric_value = 255 end
        result = result .. string.format("%2.2x", bg_numeric_value)
    end
    return result
end
theme = theme_assets.recolor_titlebar(
    theme, theme.fg_normal, "normal"
)
theme = theme_assets.recolor_titlebar(
    theme, darker(theme.fg_normal, -60), "normal", "hover"
)
theme = theme_assets.recolor_titlebar(
    theme, xrdb.color1, "normal", "press"
)
theme = theme_assets.recolor_titlebar(
    theme, theme.fg_focus, "focus"
)
theme = theme_assets.recolor_titlebar(
    theme, darker(theme.fg_focus, -60), "focus", "hover"
)
theme = theme_assets.recolor_titlebar(
    theme, xrdb.color1, "focus", "press"
)
#+END_SRC

*** Applications

Define the icon theme for application icons. If not set then the icons from =/usr/share/icons= and =/usr/share/icons/hicolor= will be used.

#+BEGIN_SRC lua :tangle theme.lua
theme.icon_theme = nil
#+END_SRC

*** Awesome

Generate Awesome icon:

#+BEGIN_SRC lua :tangle theme.lua
theme.awesome_icon = theme_assets.awesome_icon(
    theme.menu_height, theme.bg_focus, theme.fg_focus
)
#+END_SRC

*** Tag List Squares

Generate taglist squares:

#+BEGIN_SRC lua :tangle theme.lua
theme.taglist_squares_sel = theme_assets.taglist_squares_sel(
    taglist_square_size, theme.fg_normal
)
theme.taglist_squares_unsel = theme_assets.taglist_squares_unsel(
    taglist_square_size, theme.fg_normal
)
#+END_SRC

** Wallpaper

*** Detect Light / Dark Theme

Try to determine if we are running light or dark colorscheme:

#+BEGIN_SRC lua :tangle theme.lua
local bg_numberic_value = 0;
for s in theme.bg_normal:gmatch("[a-fA-F0-9][a-fA-F0-9]") do
    bg_numberic_value = bg_numberic_value + tonumber("0x"..s);
end
local is_dark_bg = (bg_numberic_value < 383)
#+END_SRC

*** Generate Wallpaper

#+BEGIN_SRC lua :tangle theme.lua
local wallpaper_bg = xrdb.color8
local wallpaper_fg = xrdb.color7
local wallpaper_alt_fg = xrdb.color12
if not is_dark_bg then
    wallpaper_bg, wallpaper_fg = wallpaper_fg, wallpaper_bg
end
theme.wallpaper = function(s)
    return theme_assets.wallpaper(wallpaper_bg, wallpaper_fg, wallpaper_alt_fg, s)
end
#+END_SRC

** Return Theme

#+BEGIN_SRC lua :tangle theme.lua
return theme
#+END_SRC
